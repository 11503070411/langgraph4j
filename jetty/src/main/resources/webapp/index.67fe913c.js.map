{"mappings":"A,I,E,W,E,C,E,E,C,E,E,E,iB,A,O,I,A,C,E,S,C,E,G,K,E,O,C,C,E,C,O,C,G,K,E,C,I,E,C,C,E,A,Q,C,C,E,C,I,E,C,G,E,Q,C,C,E,O,C,C,E,C,E,E,I,C,E,O,C,E,E,O,E,E,O,A,C,I,E,A,M,uB,E,I,O,E,I,C,mB,C,C,E,Q,C,S,C,C,C,E,C,C,E,C,C,E,E,iB,C,G,E,Q,C,I,E,E,S,E,E,QCWO,OAAM,UAA0B,EAAA,UAAS,CAE9C,OAAO,OAAS,CAAC,EAAA,OAAO,CAAG,AAAA,CAAA,EAAA,EAAA,GAAE,AAAF,CAAG,CAAC,CAAC,CAAC,AAAA,AAEjC,QAAO,WAAa,CACpB,CAAC,AAED,cAAc,CACZ,KAAK,GACL,IAAI,CAAC,OAAO,CAAG,EAAE,AACnB,CAEA,mBAAoB,CAClB,KAAK,CAAC,oBAEN,IAAI,CAAC,gBAAgB,CAAE,SAAU,IAAI,CAAC,CAAC,CAAQ,CACjD,CAEA,sBAAuB,CACrB,KAAK,CAAC,uBAEN,IAAI,CAAC,mBAAmB,CAAE,SAAW,IAAI,CAAC,CAAC,CAAQ,CACrD,CAQA,CAAC,CAAY,CAAC,CAAM,CAAE,CAAK,EACzB,MAAO,AAAA,CAAA,EAAA,EAAA,IAAG,AAAH,CAAI,CAAC;;;sDAGsC,EAAE,EAAO,IAAI,CAAC;;;;YAIxD,EAAE,OAAO,OAAO,CAAC,EAAO,KAAK,EAAE,GAAG,CAAC,CAAC,CAAC,EAAK,EAAM,GAAK,AAAA,CAAA,EAAA,EAAA,IAAG,AAAH,CAAI,CAAC;;gCAEtC,EAAE,EAAI;gCACN,EAAE,EAAM;;YAE5B,CAAC,EAAE;;;;;IAKX,CAAC,AACH,CASA,CAAC,CAAQ,CAAG,AAAC,IAEX,GAAM,CAAE,OAAQ,CAAM,CAAE,CAAG,EAC3B,QAAQ,KAAK,CAAE,WAAY,GAG3B,IAAI,CAAC,OAAO,CAAC,IAAI,CAAE,GAEnB,IAAI,CAAC,aAAa,CAAE,IAAI,YAAa,eAAgB,CACnD,OAAQ,EAAO,IAAI,CACnB,QAAS,CAAA,EACT,SAAU,CAAA,EACV,WAAY,CAAA,CACd,IAEA,IAAI,CAAC,aAAa,EAEpB,CAAC,AAGD,CAAA,QAAS,CAEP,MAAO,AAAA,CAAA,EAAA,EAAA,IAAG,AAAH,CAAI,CAAC;;MAEV,EAAE,IAAI,CAAC,OAAO,CAAC,GAAG,CAAE,CAAC,EAAQ,IAAU,IAAI,CAAC,CAAC,CAAY,CAAC,EAAQ,IAAQ;;IAE5E,CAAC,AACH,CACF,CAEA,OAAO,cAAc,CAAC,MAAM,CAAC,cAAe","sources":["<anon>","src/lg4j-result.js"],"sourcesContent":["\n      var $parcel$global = globalThis;\n    \nvar $parcel$modules = {};\nvar $parcel$inits = {};\n\nvar parcelRequire = $parcel$global[\"parcelRequire3bab\"];\n\nif (parcelRequire == null) {\n  parcelRequire = function(id) {\n    if (id in $parcel$modules) {\n      return $parcel$modules[id].exports;\n    }\n    if (id in $parcel$inits) {\n      var init = $parcel$inits[id];\n      delete $parcel$inits[id];\n      var module = {id: id, exports: {}};\n      $parcel$modules[id] = module;\n      init.call(module.exports, module, module.exports);\n      return module.exports;\n    }\n    var err = new Error(\"Cannot find module '\" + id + \"'\");\n    err.code = 'MODULE_NOT_FOUND';\n    throw err;\n  };\n\n  parcelRequire.register = function register(id, init) {\n    $parcel$inits[id] = init;\n  };\n\n  $parcel$global[\"parcelRequire3bab\"] = parcelRequire;\n}\n\nvar parcelRegister = parcelRequire.register;\n\nvar $hNeh9 = parcelRequire(\"hNeh9\");\n\nvar $800sp = parcelRequire(\"800sp\");\nclass $c06cac3eedeb74d1$export$c5542a7edb16317 extends (0, $800sp.LitElement) {\n    static styles = [\n        (0, $hNeh9.default),\n        (0, $800sp.css)``\n    ];\n    static properties = {};\n    constructor(){\n        super();\n        this.results = [];\n    }\n    connectedCallback() {\n        super.connectedCallback();\n        this.addEventListener(\"result\", this.#onResult);\n    }\n    disconnectedCallback() {\n        super.disconnectedCallback();\n        this.removeEventListener(\"result\", this.#onResult);\n    }\n    /**\n   * Renders a result.\n   * @param {ResultData} result - The result data to render.\n   * @returns {import('lit').TemplateResult} The template for the result.\n   */ #renderResult(result, index) {\n        return (0, $800sp.html)`\n    <div class=\"collapse collapse-arrow bg-base-200\">\n      <input type=\"radio\" name=\"item-1\" checked=\"checked\" />\n      <div class=\"collapse-title text-xm font-medium\">${result.node}</div>\n      <div class=\"collapse-content\">\n        <table class=\"table\">\n          <tbody>\n            ${Object.entries(result.state).map(([key, value])=>(0, $800sp.html)`\n              <tr>\n                <td width=\"30%\">${key}</td>\n                <td width=\"70%\">${value}</td>\n              </tr>\n            `)}\n          </tbody>\n        </table>\n      </div>\n    </div>\n    `;\n    }\n    /**\n   * Event handler for the 'result' event.\n   * \n   * @param {CustomEvent} e - The event object containing the result data.\n   * @private\n   */ #onResult = (e)=>{\n        const { detail: result } = e;\n        console.debug(\"onResult\", e);\n        // TODO: validate e.detail\n        this.results.push(result);\n        this.dispatchEvent(new CustomEvent(\"graph-active\", {\n            detail: result.node,\n            bubbles: true,\n            composed: true,\n            cancelable: true\n        }));\n        this.requestUpdate();\n    };\n    render() {\n        return (0, $800sp.html)`\n      <div class=\"flex flex-col gap-y-1.5 mx-2 mt-2\">\n      ${this.results.map((result, index)=>this.#renderResult(result, index))}\n      </div>\n    `;\n    }\n}\nwindow.customElements.define(\"lg4j-result\", $c06cac3eedeb74d1$export$c5542a7edb16317);\n\n\n//# sourceMappingURL=index.67fe913c.js.map\n","import TWStyles from './twlit';\n\nimport { html, css, LitElement } from 'lit';\n\n/**\n * @typedef {Object} ResultData\n * @property {string} node - The node identifier.\n * @property {Record<string, any>} state - The state associated with the node.\n */\n\n\nexport class LG4JResultElement extends LitElement {\n\n  static styles = [TWStyles, css``]\n\n  static properties = {\n  }\n\n  constructor() {\n    super()\n    this.results = []\n  }\n  \n  connectedCallback() {\n    super.connectedCallback();\n\n    this.addEventListener( 'result', this.#onResult )\n  }\n\n  disconnectedCallback() {\n    super.disconnectedCallback()\n\n    this.removeEventListener( 'result',  this.#onResult )\n  }\n\n  \n  /**\n   * Renders a result.\n   * @param {ResultData} result - The result data to render.\n   * @returns {import('lit').TemplateResult} The template for the result.\n   */\n  #renderResult(result, index) {\n    return html`\n    <div class=\"collapse collapse-arrow bg-base-200\">\n      <input type=\"radio\" name=\"item-1\" checked=\"checked\" />\n      <div class=\"collapse-title text-xm font-medium\">${result.node}</div>\n      <div class=\"collapse-content\">\n        <table class=\"table\">\n          <tbody>\n            ${Object.entries(result.state).map(([key, value]) => html`\n              <tr>\n                <td width=\"30%\">${key}</td>\n                <td width=\"70%\">${value}</td>\n              </tr>\n            `)}\n          </tbody>\n        </table>\n      </div>\n    </div>\n    `\n  }\n\n  \n  /**\n   * Event handler for the 'result' event.\n   * \n   * @param {CustomEvent} e - The event object containing the result data.\n   * @private\n   */\n  #onResult = (e) => {\n\n    const { detail: result } = e \n    console.debug( \"onResult\", e )\n    \n    // TODO: validate e.detail\n    this.results.push( result )\n\n    this.dispatchEvent( new CustomEvent( 'graph-active', { \n      detail: result.node,\n      bubbles: true,\n      composed: true,\n      cancelable: true\n    }));\n    \n    this.requestUpdate()\n    \n  }\n\n\n  render() {\n  \n    return html`\n      <div class=\"flex flex-col gap-y-1.5 mx-2 mt-2\">\n      ${this.results.map( (result, index) => this.#renderResult(result, index))}\n      </div>\n    `;\n  }\n}\n\nwindow.customElements.define('lg4j-result', LG4JResultElement);\n"],"names":["$parcel$global","globalThis","$parcel$modules","$parcel$inits","parcelRequire","id","exports","init","module","call","err","Error","code","register","$hNeh9","$800sp","$c06cac3eedeb74d1$export$c5542a7edb16317","LitElement","styles","default","css","properties","constructor","results","connectedCallback","addEventListener","onResult","disconnectedCallback","removeEventListener","renderResult","result","index","html","node","Object","entries","state","map","key","value","e","detail","console","debug","push","dispatchEvent","CustomEvent","bubbles","composed","cancelable","requestUpdate","render","window","customElements","define"],"version":3,"file":"index.67fe913c.js.map"}